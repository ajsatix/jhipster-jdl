application {
  config {
    applicationType microservice
    authenticationType jwt
    baseName alertsservice
    buildTool maven
    cacheProvider hazelcast
    clientPackageManager yarn
    databaseType sql
    devDatabaseType h2Disk
    enableHibernateCache true
    enableSwaggerCodegen false
    enableTranslation false
    jhiPrefix jhi
    jhipsterVersion "5.2.1"
   
    languages [en, fr]
    messageBroker kafka
    nativeLanguage en
    packageName com.kloudlearn.alerts
    prodDatabaseType mysql
    searchEngine false
    serverPort 8081
    serviceDiscoveryType eureka
    skipClient true
    skipUserManagement true
    testFrameworks [gatling]
    websocket false
  }

  entities Alert, AlertAction, AlertMailStage, AlertPushNotificationtStage, AlertSmsStage, AlertUserView, NotificationActionItem, NotificationActionUserMediumMap, NotificationMedium, SendAlert, UserPushNotification, UserPushToken, UserPushTokenHistory, UserSms
}

/**
 * The Alert entity.
 * @author Mohamed Saleem
 */
entity Alert {
  /**
   * message Message to show in UI
   */
  alertMessage String,
  /**
   * receiverType Type of reciever. Can be User, Group
   */
  receiverType AlertReceiverType,
  /**
   * receiverId Id of the receiver
   */
  receiverId Long,
  /**
   * senderType Alert sender type. Can be Course, Asset, System
   */
  senderType AlertSenderType,
  /**
   * senderId Id of the sender
   */
  senderId Long,
  /**
   * alertAction Action to perform such as view_course, view_asset
   */
  action String,
  /**
   * Metadata regarding the alert such as course id, user id etc.
   */
  metadata TextBlob,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime
}
entity AlertAction {
  actionName String
}
entity AlertMailStage {
  sendAlertId Long,
  userId Long,
  actionItemType String,
  subject String,
  sentAt ZonedDateTime,
  status String,
  errorMessage String,
  modifiedAt ZonedDateTime,
  createdAt ZonedDateTime,
  content TextBlob
}
entity AlertPushNotificationtStage {
  sendAlertId Long,
  userId Long,
  actionItemType String,
  title String,
  message String,
  payload TextBlob,
  status String,
  sentAt ZonedDateTime,
  errorMessage TextBlob,
  modifiedAt ZonedDateTime,
  createAt ZonedDateTime
}
entity AlertSmsStage {
  sendAlertId Long,
  userId Long,
  actionItemType String,
  content String,
  sentAt ZonedDateTime,
  status String,
  errorMessage String,
  modifiedAt ZonedDateTime,
  createdAt ZonedDateTime
}
/**
 * The AlertUserView entity.
 * @author Mohamed Saleem
 */
entity AlertUserView {
  alertId Long,
  userId Long,
  createdAt ZonedDateTime
}
entity NotificationActionItem {
  actionItem String,
  tag String,
  createdAt ZonedDateTime
}
entity NotificationActionUserMediumMap {
  userId Long,
  notificationActionItemId Long,
  notificationMediumId Long,
  modifiedAt ZonedDateTime,
  createdAt ZonedDateTime,
  active Boolean
}
entity NotificationMedium {
  mediumName String,
  tag String,
  createdAt ZonedDateTime
}
entity SendAlert {
  userId Long,
  actionItemType String,
  metaData TextBlob,
  status String,
  modifiedAt ZonedDateTime,
  createdAt ZonedDateTime
}
entity UserPushNotification {
  deviceToken TextBlob,
  userId Long,
  title String,
  message String,
  sendAt ZonedDateTime,
  status String,
  clickedAt ZonedDateTime,
  errorMessage String,
  modifiedAt ZonedDateTime,
  createdAt ZonedDateTime,
  payload TextBlob
}
entity UserPushToken {
  userId Long,
  deviceToken String,
  deviceId String,
  modifiedAt ZonedDateTime,
  createdAt ZonedDateTime
}
entity UserPushTokenHistory {
  userId Long,
  deviceToken String,
  deviceId String,
  modifiedAt ZonedDateTime,
  createdAt ZonedDateTime,
  userPushTokenCreatedAt ZonedDateTime
}
entity UserSms {
  mobileNumber String,
  userId Long,
  fromNumber String,
  messageId TextBlob,
  content TextBlob,
  sendAt ZonedDateTime,
  status String,
  deliveryAt ZonedDateTime,
  lastCheckAt ZonedDateTime,
  error TextBlob,
  errorCode String,
  modifiedAt ZonedDateTime,
  createdAt ZonedDateTime
}
enum AlertReceiverType {
  GROUP,
  USER
}
enum AlertSenderType {
  COURSE,
  ASSET,
  SYSTEM
}

dto Alert, AlertAction, AlertMailStage, AlertPushNotificationtStage, AlertSmsStage, AlertUserView, NotificationActionItem, NotificationActionUserMediumMap, NotificationMedium, SendAlert, UserPushNotification, UserPushToken, UserPushTokenHistory, UserSms with mapstruct
paginate Alert, AlertAction, AlertUserView with pagination
service Alert, AlertAction, AlertMailStage, AlertPushNotificationtStage, AlertSmsStage, AlertUserView, NotificationActionItem, NotificationActionUserMediumMap, NotificationMedium, SendAlert, UserPushNotification, UserPushToken, UserPushTokenHistory, UserSms with serviceClass
microservice Alert, AlertAction, AlertMailStage, AlertPushNotificationtStage, AlertSmsStage, AlertUserView, NotificationActionItem, NotificationActionUserMediumMap, NotificationMedium, SendAlert, UserPushNotification, UserPushToken, UserPushTokenHistory, UserSms with alertsservice

application {
  config {
    applicationType microservice
    authenticationType jwt
    baseName CourseService
    buildTool maven
    cacheProvider hazelcast
    clientPackageManager yarn
    databaseType sql
    devDatabaseType h2Disk
    enableHibernateCache true
    enableSwaggerCodegen false
    enableTranslation false
    jhiPrefix jhi
    jhipsterVersion "5.1.0"
    jwtSecretKey "69e58a634d6da75c372251a8b19c1a9672d1d0c7"
    languages [en, fr]
    messageBroker false
    nativeLanguage en
    packageName com.xedflix.courseservice
    prodDatabaseType mysql
    searchEngine false
    serverPort 8082
    serviceDiscoveryType eureka
    skipClient true
    skipUserManagement true
    testFrameworks []
    websocket false
  }

  entities AssetCompletion, Badge, BadgeRule, Certificate, CompletionSetting, CompletionSettingOptions, Course, CourseAssignment, CourseAssignmentAuth, CourseCompletion, CourseEnrollment, CourseMetaData, CourseModule, CourseModuleType, CourseProgress, CourseResource, CourseResourceCompletion, CourseResourceType, CourseSkill, CourseType, GradeFactor, GradedResponseFactor, GradingStation, HelpCourse, Note, NoteGroup, NoteStar, NoteView, QuestionType, Questions, ResourceProgress, Responses, Skill, Skills, UserBadge
}

entity AssetCompletion {
  userId Long,
  assetId Long,
  status String
}
entity Badge {
  /**
   * name
   */
  name String,
  description String,
  imageUrl String,
  badgeOwnerType BadgeOwnerType,
  badgeOwnerId Long
}
entity BadgeRule {
  /**
   * name
   */
  name String,
  fieldName String,
  fieldCriteria Integer
}
entity Certificate {
  name String required
}
/**
 * The CompletionSetting entity.
 * @author A true hipster
 */
entity CompletionSetting {
  completionSettingsType String,
  minTimeSpent Integer,
  courseId Long,
  courseResourceId Long,
  userId Long,
  orgId Long,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime,
  passRequirement Integer,
  enforceTime Boolean,
  forceSequence Boolean,
  hideControls Boolean,
  resourceCompletionCriteria String,
  completionCriteria String,
  certificateOption String,
  minResourceTimeSpent Integer,
  certificateId Long
}
entity CompletionSettingOptions {
  field String,
  value String
}
entity Course {
  name String required,
  description String required,
  rating Float,
  isPublished Boolean,
  publishedOn LocalDate,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime,
  imageUrl String,
  userId Long,
  organizationId Long,
  isArchived Boolean,
  isPublic Boolean required,
  privacyType CoursePrivacyType,
  commonCourseType Boolean,
  dueDate LocalDate,
  license String,
  certificate Boolean
}
entity CourseAssignment {
  courseId Long,
  assigneeType AssigneeType,
  assigneeId Long,
  assignedBy Long,
  assignedViaGroup Boolean,
  assignedGroupId Long,
  startDate ZonedDateTime,
  endDate ZonedDateTime,
  mandatory Boolean,
  createdAt ZonedDateTime
}
entity CourseAssignmentAuth {
  key String,
  email String,
  courseId Long,
  createdAt ZonedDateTime
}
entity CourseCompletion {
  userId Long,
  courseId Long,
  createdAt ZonedDateTime
}
entity CourseEnrollment {
  courseId Long,
  userId Long,
  enrollment ZonedDateTime,
  enrollmentStatus Boolean,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime
}
entity CourseMetaData {
  numOfModules Long,
  numofResources Long,
  courseId Long
}
entity CourseModule {
  name String required,
  description String required,
  duration Integer,
  ordering Integer required,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime,
  isArchived Boolean,
  courseModulePrivacyType CourseModulePrivacyType
}
/**
 * course module type includes free, paid, custom
 */
entity CourseModuleType {
  type String
}
entity CourseProgress {
  userId Long,
  courseId Long,
  numOfCompletedResources Integer,
  progress Integer,
  status String,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime
}
entity CourseResource {
  name String required,
  description String required,
  imageUrl String,
  ordering Integer required,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime,
  isArchived Boolean,
  resourceType String required,
  resourceId Long required
}
entity CourseResourceCompletion {
  userId Long,
  courseResourceId Long,
  createdAt ZonedDateTime
}
/**
 * course resource type includes video, livestream, blogpost
 */
entity CourseResourceType {
  type String
}
entity CourseSkill {
  skillId Long,
  courseId Long,
  addedByUserId Long,
  createdAt ZonedDateTime
}
/**
 * course type includes free, paid, custom
 */
entity CourseType {
  type String
}
entity GradeFactor {
  name String,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime
}
entity GradedResponseFactor {
  gradeFactorId Long,
  rating Integer,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime
}
entity GradingStation {
  questionId Long,
  responseId Long,
  feedback TextBlob,
  score Integer,
  correctAnswer Boolean,
  organizationId Long,
  userId Long,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime
}
entity HelpCourse {
  courseId Long required,
  createdAt ZonedDateTime
}
entity Note {
  text String,
  userId Long required,
  orgId Long required,
  courseId Long required,
  courseResourceId Long required,
  weblinkPresent Boolean,
  weblinkDataJson AnyBlob,
  pinned Boolean,
  /**
   * Annotation Timestamp in asset
   */
  tsInAsset Integer,
  attachmentType NoteAttachmentType,
  attachmentId Long,
  privacy NotePrivacy,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime,
  completed Boolean
}
entity NoteGroup {
  noteId Long,
  groupId Long,
  createdAt ZonedDateTime
}
entity NoteStar {
  noteId Long required,
  userId Long required,
  createdAt ZonedDateTime
}
entity NoteView {
  userId Long,
  noteId Long required,
  userPublic Boolean,
  createdAt ZonedDateTime required
}
/**
 * Question request type includes video, textarea, quiz
 */
entity QuestionType {
  type String,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime
}
entity Questions {
  courseId Long,
  courseModuleId Long,
  question TextBlob,
  multipleResponse Boolean,
  organizationId Long,
  userId Long,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime,
  courseResourceId Long
}
entity ResourceProgress {
  userId Long,
  courseId Long,
  resourceId Long,
  progress Integer,
  status String,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime
}
entity Responses {
  answer TextBlob,
  attempt Integer,
  organizationId Long,
  userId Long,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime
}
entity Skill {
  name String,
  points Long,
  userId Long,
  orgId Long,
  approvedByAdmin Boolean,
  requireAdminApproval Boolean,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime
}
entity Skills {
  skills String,
  skillForId Long,
  skillFor String,
  createdAt ZonedDateTime,
  updatedAt ZonedDateTime
}
entity UserBadge {
  /**
   * user_id
   */
  userId Long,
  progress Integer
}
enum BadgeOwnerType {
  ORGANIZATION,
  GROUP
}
enum CoursePrivacyType {
  PRIVATE,
  PUBLIC,
  PUBLIC_ORG
}
enum AssigneeType {
  USER,
  GROUP_USER
}
enum CourseModulePrivacyType {
  PRIVATE,
  PUBLIC,
  PUBLIC_ORG
}
enum NoteAttachmentType {
  COURSE,
  ASSET
}
enum NotePrivacy {
  PRIVATE,
  PUBLIC,
  GROUP,
  ORGANIZATION
}

relationship OneToMany {
  Course{course} to CourseModule{course},
  CourseModule{courseModule} to CourseResource{courseModule},
  Questions{gradeFactor} to GradeFactor{questions},
  Responses{gradedResponseFactor} to GradedResponseFactor{responses},
  QuestionType{questions} to Questions{questionType},
  Questions{responses} to Responses{questions}
}
relationship ManyToOne {
  BadgeRule{badge} to Badge,
  Course{courseType} to CourseType,
  CourseModule{courseModuleType} to CourseModuleType,
  CourseResource{courseResourceType} to CourseResourceType,
  UserBadge{badgeRule} to BadgeRule,
  UserBadge{badge} to Badge
}

dto AssetCompletion, Badge, BadgeRule, Certificate, CompletionSetting, CompletionSettingOptions, CourseAssignment, CourseCompletion, CourseResourceCompletion, CourseSkill, Note, NoteGroup, NoteStar, NoteView, Skill, UserBadge with mapstruct
paginate AssetCompletion, Badge, BadgeRule, Certificate, CompletionSetting, CompletionSettingOptions, Course, CourseAssignment, CourseCompletion, CourseMetaData, CourseProgress, CourseResourceCompletion, CourseSkill, GradeFactor, GradedResponseFactor, GradingStation, HelpCourse, NoteStar, QuestionType, Questions, ResourceProgress, Responses, Skill, UserBadge with pagination
paginate Note with infinite-scroll
service AssetCompletion, Badge, BadgeRule, Certificate, CompletionSetting, CompletionSettingOptions, Course, CourseAssignment, CourseAssignmentAuth, CourseCompletion, CourseEnrollment, CourseMetaData, CourseModule, CourseProgress, CourseResource, CourseResourceCompletion, CourseSkill, GradeFactor, GradedResponseFactor, GradingStation, HelpCourse, Note, NoteGroup, NoteStar, NoteView, QuestionType, Questions, ResourceProgress, Responses, Skill, Skills, UserBadge with serviceClass
microservice AssetCompletion, Badge, BadgeRule, Certificate, CompletionSetting, CompletionSettingOptions, Course, CourseAssignment, CourseAssignmentAuth, CourseCompletion, CourseEnrollment, CourseMetaData, CourseModule, CourseModuleType, CourseProgress, CourseResource, CourseResourceCompletion, CourseResourceType, CourseSkill, CourseType, GradeFactor, GradedResponseFactor, GradingStation, HelpCourse, Note, NoteGroup, NoteStar, NoteView, QuestionType, Questions, ResourceProgress, Responses, Skill, Skills, UserBadge with CourseService
clientRootFolder AssetCompletion, Badge, BadgeRule, Certificate, CompletionSetting, CompletionSettingOptions, CourseEnrollment, CourseMetaData, CourseProgress, GradeFactor, GradedResponseFactor, GradingStation, QuestionType, Questions, ResourceProgress, Responses, Skills, UserBadge with CourseService
